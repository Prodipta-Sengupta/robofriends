{"version":3,"sources":["components/Card.js","components/CardsList.js","components/SearchBox.js","components/ErroBoundary.js","components/Scrol.js","containers/App.js","serviceWorker.js","index.js","logo.svg"],"names":["Card","name","email","id","className","src","alt","CardsList","robots","map","user","i","key","SearchBox","onSearchChange","searchfield","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","console","log","children","Component","Scrol","style","overflow","border","height","App","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"4MAiBeA,G,kBAfF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OACI,yBAAKC,UAAU,0DAEX,6BACA,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,QCWLK,EAnBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEjB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAEQ,kBAAC,EAAD,CAAMC,IAAKD,EACXR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCD9BW,EAXG,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,eAAgC,EAAjBC,YAC/B,OACI,yBAAKX,UAAU,IACX,2BAAOY,KAAK,YACZC,YAAY,YACZb,UAAU,mCACVc,SAAYJ,MCuBTK,E,YA3BX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,UAAS,GAHC,E,+EAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SAEN,8DAIJK,QAAQC,IAAIH,KAAKJ,MAAMC,UAEnB,6BACKG,KAAKL,MAAMS,e,GApBJC,aCQbC,EATD,SAACX,GAGX,OACI,yBAAKY,MAAO,CAACC,SAAS,SAAUC,OAAQ,iBAAkBC,OAAO,UAC5Df,EAAMS,WCiDJO,E,YA9Cb,aAAe,IAAD,8BACZ,+CAgBFtB,eAAiB,SAACuB,GAEhB,EAAKX,SAAS,CAAEX,YAAasB,EAAMC,OAAOC,QAC1CZ,QAAQC,IAAIS,EAAMC,OAAOC,QAlBzB,EAAKlB,MAAQ,CACXb,OAAQ,GACRO,YAAa,IAJH,E,iFAOO,IAAD,OAClByB,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACNjB,QAAQC,IAAI,iBACZ,EAAKF,SAAS,CAAElB,OAAQoC,IACxBjB,QAAQC,IAAIgB,Q,+BAUN,IAAD,OACDC,EAAiBpB,KAAKJ,MAAMb,OAAOsC,QAAO,SAAAC,GAC9C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAK5B,MAAMN,YAAYiC,kBAElE,OAAiC,IAA7BvB,KAAKJ,MAAMb,OAAO0C,OACZ,2CAGR,yBAAK9C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWU,eAAgBW,KAAKX,eAC9BC,YAAaU,KAAKJ,MAAMN,cAC1B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWP,OAAQqC,W,GAtCbf,aCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCRNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.35a6b647.chunk.js","sourcesContent":["import  React  from 'react';\r\nimport { tsPropertySignature } from '@babel/types';\r\nconst Card = ({name,email,id}) => {\r\n    return (\r\n        <div className=\"tc bg-washed-green dib br3 ma2 pa3 grow bw2 shadow-fog\">\r\n            \r\n            <div>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardsList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                            \r\n                            <Card key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} />\r\n                        \r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardsList;","import React from \"react\";\r\nconst SearchBox = ({onSearchChange,searchfield}) => {\r\n    return (\r\n        <div className=\"\">\r\n            <input type=\"SearchBox\" \r\n            placeholder=\"searchbox\" \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            onChange = {onSearchChange}\r\n            ></input>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React,{ Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }        \r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return(\r\n                <h1>Ooops Something Went Wrong!!!</h1>\r\n            );\r\n        }\r\n        else{\r\n            console.log(this.state.hasError);\r\n            return(\r\n                <div>\r\n                    {this.props.children}\r\n                </div>\r\n            );\r\n        }            \r\n    }\r\n        \r\n    \r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nconst Scrol = (props) => {\r\n\r\n\r\n    return(\r\n        <div style={{overflow:'scroll' ,border: '5px solid blue', height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scrol;","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport CardsList from \"../components/CardsList\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundary from \"../components/ErroBoundary\";\n//import { robots } from \"./robots\";\nimport Scrol from \"../components/Scrol\";\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    }\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n      return response.json();\n    }).then(users => {\n      console.log(\"Setting state\");\n      this.setState({ robots: users });\n      console.log(users);\n    });\n\n  }\n  onSearchChange = (event) => {\n    // console.log(\"Checking flow here!!!\");\n    this.setState({ searchfield: event.target.value });\n    console.log(event.target.value);\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    });\n    if (this.state.robots.length === 0) {\n      return (<h1>Loading....</h1>)\n    }\n    return (\n      <div className=\"tc\">\n        <h1>RoboFriends</h1>\n        <SearchBox onSearchChange={this.onSearchChange}\n          searchfield={this.state.searchfield} />\n        <Scrol>\n          <ErrorBoundary>\n            <CardsList robots={filteredRobots} />\n          </ErrorBoundary>\n\n        </Scrol>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport { directive } from '@babel/types';\nimport 'tachyons';\n//import {robots} from \"./robots\";\n//import CardsList from \"./components/CardsList\";\nReactDOM.render(<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}